(function(t, i) {
    typeof exports === "object" && typeof module !== "undefined" ? i(exports) : typeof define === "function" && define.amd ? define("sdsl", [ "exports" ], i) : (t = typeof globalThis !== "undefined" ? globalThis : t || self, 
    i(t.sdsl = {}));
})(this, (function(t) {
    "use strict";
    var extendStatics = function(t, i) {
        extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(t, i) {
            t.__proto__ = i;
        } || function(t, i) {
            for (var e in i) if (Object.prototype.hasOwnProperty.call(i, e)) t[e] = i[e];
        };
        return extendStatics(t, i);
    };
    function __extends(t, i) {
        if (typeof i !== "function" && i !== null) throw new TypeError("Class extends value " + String(i) + " is not a constructor or null");
        extendStatics(t, i);
        function __() {
            this.constructor = t;
        }
        t.prototype = i === null ? Object.create(i) : (__.prototype = i.prototype, new __);
    }
    function __generator(t, i) {
        var e = {
            label: 0,
            sent: function() {
                if (s[0] & 1) throw s[1];
                return s[1];
            },
            trys: [],
            ops: []
        }, r, n, s, h;
        return h = {
            next: verb(0),
            throw: verb(1),
            return: verb(2)
        }, typeof Symbol === "function" && (h[Symbol.iterator] = function() {
            return this;
        }), h;
        function verb(t) {
            return function(i) {
                return step([ t, i ]);
            };
        }
        function step(h) {
            if (r) throw new TypeError("Generator is already executing.");
            while (e) try {
                if (r = 1, n && (s = h[0] & 2 ? n["return"] : h[0] ? n["throw"] || ((s = n["return"]) && s.call(n), 
                0) : n.next) && !(s = s.call(n, h[1])).done) return s;
                if (n = 0, s) h = [ h[0] & 2, s.value ];
                switch (h[0]) {
                  case 0:
                  case 1:
                    s = h;
                    break;

                  case 4:
                    e.label++;
                    return {
                        value: h[1],
                        done: false
                    };

                  case 5:
                    e.label++;
                    n = h[1];
                    h = [ 0 ];
                    continue;

                  case 7:
                    h = e.ops.pop();
                    e.trys.pop();
                    continue;

                  default:
                    if (!(s = e.trys, s = s.length > 0 && s[s.length - 1]) && (h[0] === 6 || h[0] === 2)) {
                        e = 0;
                        continue;
                    }
                    if (h[0] === 3 && (!s || h[1] > s[0] && h[1] < s[3])) {
                        e.label = h[1];
                        break;
                    }
                    if (h[0] === 6 && e.label < s[1]) {
                        e.label = s[1];
                        s = h;
                        break;
                    }
                    if (s && e.label < s[2]) {
                        e.label = s[2];
                        e.ops.push(h);
                        break;
                    }
                    if (s[2]) e.ops.pop();
                    e.trys.pop();
                    continue;
                }
                h = i.call(t, e);
            } catch (t) {
                h = [ 6, t ];
                n = 0;
            } finally {
                r = s = 0;
            }
            if (h[0] & 5) throw h[1];
            return {
                value: h[0] ? h[1] : void 0,
                done: true
            };
        }
    }
    function __values(t) {
        var i = typeof Symbol === "function" && Symbol.iterator, e = i && t[i], r = 0;
        if (e) return e.call(t);
        if (t && typeof t.length === "number") return {
            next: function() {
                if (t && r >= t.length) t = void 0;
                return {
                    value: t && t[r++],
                    done: !t
                };
            }
        };
        throw new TypeError(i ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(t, i) {
        var e = typeof Symbol === "function" && t[Symbol.iterator];
        if (!e) return t;
        var r = e.call(t), n, s = [], h;
        try {
            while ((i === void 0 || i-- > 0) && !(n = r.next()).done) s.push(n.value);
        } catch (t) {
            h = {
                error: t
            };
        } finally {
            try {
                if (n && !n.done && (e = r["return"])) e.call(r);
            } finally {
                if (h) throw h.error;
            }
        }
        return s;
    }
    function __spreadArray(t, i, e) {
        if (e || arguments.length === 2) for (var r = 0, n = i.length, s; r < n; r++) {
            if (s || !(r in i)) {
                if (!s) s = Array.prototype.slice.call(i, 0, r);
                s[r] = i[r];
            }
        }
        return t.concat(s || Array.prototype.slice.call(i));
    }
    var i = function() {
        function ContainerIterator(t) {
            if (t === void 0) {
                t = 0;
            }
            this.iteratorType = t;
        }
        return ContainerIterator;
    }();
    var e = function() {
        function Base() {
            this.t = 0;
        }
        Base.prototype.size = function() {
            return this.t;
        };
        Base.prototype.empty = function() {
            return this.t === 0;
        };
        return Base;
    }();
    var r = function(t) {
        __extends(Container, t);
        function Container() {
            return t !== null && t.apply(this, arguments) || this;
        }
        return Container;
    }(e);
    var n = function(t) {
        __extends(Stack, t);
        function Stack(i) {
            if (i === void 0) {
                i = [];
            }
            var e = t.call(this) || this;
            e.i = [];
            i.forEach((function(t) {
                return e.push(t);
            }));
            return e;
        }
        Stack.prototype.clear = function() {
            this.t = 0;
            this.i.length = 0;
        };
        Stack.prototype.push = function(t) {
            this.i.push(t);
            this.t += 1;
        };
        Stack.prototype.pop = function() {
            this.i.pop();
            if (this.t > 0) this.t -= 1;
        };
        Stack.prototype.top = function() {
            return this.i[this.t - 1];
        };
        return Stack;
    }(e);
    var s = function(t) {
        __extends(SequentialContainer, t);
        function SequentialContainer() {
            return t !== null && t.apply(this, arguments) || this;
        }
        return SequentialContainer;
    }(r);
    var h = function(t) {
        __extends(RandomIterator, t);
        function RandomIterator(i, e, r, n, s) {
            var h = t.call(this, s) || this;
            h.h = i;
            h.u = e;
            h.o = r;
            h.v = n;
            if (h.iteratorType === 0) {
                h.pre = function() {
                    if (this.h === 0) {
                        throw new RangeError("Random iterator access denied!");
                    }
                    this.h -= 1;
                    return this;
                };
                h.next = function() {
                    if (this.h === this.u()) {
                        throw new RangeError("Random Iterator access denied!");
                    }
                    this.h += 1;
                    return this;
                };
            } else {
                h.pre = function() {
                    if (this.h === this.u() - 1) {
                        throw new RangeError("Random iterator access denied!");
                    }
                    this.h += 1;
                    return this;
                };
                h.next = function() {
                    if (this.h === -1) {
                        throw new RangeError("Random iterator access denied!");
                    }
                    this.h -= 1;
                    return this;
                };
            }
            return h;
        }
        Object.defineProperty(RandomIterator.prototype, "pointer", {
            get: function() {
                return this.o(this.h);
            },
            set: function(t) {
                this.v(this.h, t);
            },
            enumerable: false,
            configurable: true
        });
        RandomIterator.prototype.equals = function(t) {
            return this.h === t.h;
        };
        return RandomIterator;
    }(i);
    var u = function(t) {
        __extends(DequeIterator, t);
        function DequeIterator() {
            return t !== null && t.apply(this, arguments) || this;
        }
        DequeIterator.prototype.copy = function() {
            return new DequeIterator(this.h, this.u, this.o, this.v, this.iteratorType);
        };
        return DequeIterator;
    }(h);
    var f = function(t) {
        __extends(Deque, t);
        function Deque(i, e) {
            if (i === void 0) {
                i = [];
            }
            if (e === void 0) {
                e = 1 << 12;
            }
            var r = t.call(this) || this;
            r.l = 0;
            r._ = 0;
            r.L = 0;
            r.p = 0;
            r.O = 0;
            r.k = [];
            var n;
            if ("size" in i) {
                if (typeof i.size === "number") {
                    n = i.size;
                } else {
                    n = i.size();
                }
            } else if ("length" in i) {
                n = i.length;
            } else {
                throw new RangeError("Can't get container's size!");
            }
            r.S = e;
            r.O = Math.max(Math.ceil(n / r.S), 1);
            for (var s = 0; s < r.O; ++s) {
                r.k.push(new Array(r.S));
            }
            var h = Math.ceil(n / r.S);
            r.l = r.L = (r.O >> 1) - (h >> 1);
            r._ = r.p = r.S - n % r.S >> 1;
            i.forEach((function(t) {
                return r.pushBack(t);
            }));
            r.size = r.size.bind(r);
            r.getElementByPos = r.getElementByPos.bind(r);
            r.setElementByPos = r.setElementByPos.bind(r);
            return r;
        }
        Deque.prototype.I = function() {
            var t = [];
            var i = Math.max(this.O >> 1, 1);
            for (var e = 0; e < i; ++e) {
                t[e] = new Array(this.S);
            }
            for (var e = this.l; e < this.O; ++e) {
                t[t.length] = this.k[e];
            }
            for (var e = 0; e < this.L; ++e) {
                t[t.length] = this.k[e];
            }
            t[t.length] = __spreadArray([], __read(this.k[this.L]), false);
            this.l = i;
            this.L = t.length - 1;
            for (var e = 0; e < i; ++e) {
                t[t.length] = new Array(this.S);
            }
            this.k = t;
            this.O = t.length;
        };
        Deque.prototype.g = function(t) {
            var i = this._ + t + 1;
            var e = i % this.S;
            var r = e - 1;
            var n = this.l + (i - e) / this.S;
            if (e === 0) n -= 1;
            n %= this.O;
            if (r < 0) r += this.S;
            return {
                curNodeBucketIndex: n,
                curNodePointerIndex: r
            };
        };
        Deque.prototype.clear = function() {
            this.k = [ [] ];
            this.O = 1;
            this.l = this.L = this.t = 0;
            this._ = this.p = this.S >> 1;
        };
        Deque.prototype.front = function() {
            return this.k[this.l][this._];
        };
        Deque.prototype.back = function() {
            return this.k[this.L][this.p];
        };
        Deque.prototype.begin = function() {
            return new u(0, this.size, this.getElementByPos, this.setElementByPos);
        };
        Deque.prototype.end = function() {
            return new u(this.t, this.size, this.getElementByPos, this.setElementByPos);
        };
        Deque.prototype.rBegin = function() {
            return new u(this.t - 1, this.size, this.getElementByPos, this.setElementByPos, 1);
        };
        Deque.prototype.rEnd = function() {
            return new u(-1, this.size, this.getElementByPos, this.setElementByPos, 1);
        };
        Deque.prototype.pushBack = function(t) {
            if (this.t) {
                if (this.p < this.S - 1) {
                    this.p += 1;
                } else if (this.L < this.O - 1) {
                    this.L += 1;
                    this.p = 0;
                } else {
                    this.L = 0;
                    this.p = 0;
                }
                if (this.L === this.l && this.p === this._) this.I();
            }
            this.t += 1;
            this.k[this.L][this.p] = t;
        };
        Deque.prototype.popBack = function() {
            if (!this.t) return;
            this.k[this.L][this.p] = undefined;
            if (this.t !== 1) {
                if (this.p > 0) {
                    this.p -= 1;
                } else if (this.L > 0) {
                    this.L -= 1;
                    this.p = this.S - 1;
                } else {
                    this.L = this.O - 1;
                    this.p = this.S - 1;
                }
            }
            this.t -= 1;
        };
        Deque.prototype.pushFront = function(t) {
            if (this.t) {
                if (this._ > 0) {
                    this._ -= 1;
                } else if (this.l > 0) {
                    this.l -= 1;
                    this._ = this.S - 1;
                } else {
                    this.l = this.O - 1;
                    this._ = this.S - 1;
                }
                if (this.l === this.L && this._ === this.p) this.I();
            }
            this.t += 1;
            this.k[this.l][this._] = t;
        };
        Deque.prototype.popFront = function() {
            if (!this.t) return;
            this.k[this.l][this._] = undefined;
            if (this.t !== 1) {
                if (this._ < this.S - 1) {
                    this._ += 1;
                } else if (this.l < this.O - 1) {
                    this.l += 1;
                    this._ = 0;
                } else {
                    this.l = 0;
                    this._ = 0;
                }
            }
            this.t -= 1;
        };
        Deque.prototype.forEach = function(t) {
            for (var i = 0; i < this.t; ++i) {
                t(this.getElementByPos(i), i);
            }
        };
        Deque.prototype.getElementByPos = function(t) {
            var i = this.g(t), e = i.curNodeBucketIndex, r = i.curNodePointerIndex;
            return this.k[e][r];
        };
        Deque.prototype.setElementByPos = function(t, i) {
            var e = this.g(t), r = e.curNodeBucketIndex, n = e.curNodePointerIndex;
            this.k[r][n] = i;
        };
        Deque.prototype.insert = function(t, i, e) {
            if (e === void 0) {
                e = 1;
            }
            if (t === 0) {
                while (e--) this.pushFront(i);
            } else if (t === this.t) {
                while (e--) this.pushBack(i);
            } else {
                var r = [];
                for (var n = t; n < this.t; ++n) {
                    r.push(this.getElementByPos(n));
                }
                this.cut(t - 1);
                for (var n = 0; n < e; ++n) this.pushBack(i);
                for (var n = 0; n < r.length; ++n) this.pushBack(r[n]);
            }
        };
        Deque.prototype.cut = function(t) {
            if (t < 0) {
                this.clear();
                return;
            }
            var i = this.g(t), e = i.curNodeBucketIndex, r = i.curNodePointerIndex;
            this.L = e;
            this.p = r;
            this.t = t + 1;
        };
        Deque.prototype.eraseElementByPos = function(t) {
            var i = this;
            if (t === 0) this.popFront(); else if (t === this.t - 1) this.popBack(); else {
                var e = [];
                for (var r = t + 1; r < this.t; ++r) {
                    e.push(this.getElementByPos(r));
                }
                this.cut(t);
                this.popBack();
                e.forEach((function(t) {
                    return i.pushBack(t);
                }));
            }
        };
        Deque.prototype.eraseElementByValue = function(t) {
            if (!this.t) return;
            var i = [];
            for (var e = 0; e < this.t; ++e) {
                var r = this.getElementByPos(e);
                if (r !== t) i.push(r);
            }
            var n = i.length;
            for (var e = 0; e < n; ++e) this.setElementByPos(e, i[e]);
            this.cut(n - 1);
        };
        Deque.prototype.eraseElementByIterator = function(t) {
            var i = t.h;
            this.eraseElementByPos(i);
            t = t.next();
            return t;
        };
        Deque.prototype.find = function(t) {
            for (var i = 0; i < this.t; ++i) {
                if (this.getElementByPos(i) === t) {
                    return new u(i, this.size, this.getElementByPos, this.setElementByPos);
                }
            }
            return this.end();
        };
        Deque.prototype.reverse = function() {
            var t = 0;
            var i = this.t - 1;
            while (t < i) {
                var e = this.getElementByPos(t);
                this.setElementByPos(t, this.getElementByPos(i));
                this.setElementByPos(i, e);
                t += 1;
                i -= 1;
            }
        };
        Deque.prototype.unique = function() {
            if (this.t <= 1) return;
            var t = 1;
            var i = this.getElementByPos(0);
            for (var e = 1; e < this.t; ++e) {
                var r = this.getElementByPos(e);
                if (r !== i) {
                    i = r;
                    this.setElementByPos(t++, r);
                }
            }
            while (this.t > t) this.popBack();
        };
        Deque.prototype.sort = function(t) {
            var i = [];
            for (var e = 0; e < this.t; ++e) {
                i.push(this.getElementByPos(e));
            }
            i.sort(t);
            for (var e = 0; e < this.t; ++e) this.setElementByPos(e, i[e]);
        };
        Deque.prototype.shrinkToFit = function() {
            if (!this.t) return;
            var t = [];
            this.forEach((function(i) {
                return t.push(i);
            }));
            this.O = Math.max(Math.ceil(this.t / this.S), 1);
            this.t = this.l = this.L = this._ = this.p = 0;
            this.k = [];
            for (var i = 0; i < this.O; ++i) {
                this.k.push(new Array(this.S));
            }
            for (var i = 0; i < t.length; ++i) this.pushBack(t[i]);
        };
        Deque.prototype[Symbol.iterator] = function() {
            return function() {
                var t;
                return __generator(this, (function(i) {
                    switch (i.label) {
                      case 0:
                        t = 0;
                        i.label = 1;

                      case 1:
                        if (!(t < this.t)) return [ 3, 4 ];
                        return [ 4, this.getElementByPos(t) ];

                      case 2:
                        i.sent();
                        i.label = 3;

                      case 3:
                        ++t;
                        return [ 3, 1 ];

                      case 4:
                        return [ 2 ];
                    }
                }));
            }.bind(this)();
        };
        return Deque;
    }(s);
    var a = function(t) {
        __extends(Queue, t);
        function Queue(i) {
            if (i === void 0) {
                i = [];
            }
            var e = t.call(this) || this;
            e.T = new f(i);
            e.t = e.T.size();
            return e;
        }
        Queue.prototype.clear = function() {
            this.T.clear();
            this.t = 0;
        };
        Queue.prototype.push = function(t) {
            this.T.pushBack(t);
            this.t += 1;
        };
        Queue.prototype.pop = function() {
            this.T.popFront();
            if (this.t) this.t -= 1;
        };
        Queue.prototype.front = function() {
            return this.T.front();
        };
        return Queue;
    }(e);
    var o = function(t) {
        __extends(PriorityQueue, t);
        function PriorityQueue(i, e, r) {
            if (i === void 0) {
                i = [];
            }
            if (e === void 0) {
                e = function(t, i) {
                    if (t > i) return -1;
                    if (t < i) return 1;
                    return 0;
                };
            }
            if (r === void 0) {
                r = true;
            }
            var n = t.call(this) || this;
            n.M = e;
            if (Array.isArray(i)) {
                n.q = r ? __spreadArray([], __read(i), false) : i;
            } else {
                n.q = [];
                i.forEach((function(t) {
                    return n.q.push(t);
                }));
            }
            n.t = n.q.length;
            var s = n.t >> 1;
            for (var h = n.t - 1 >> 1; h >= 0; --h) {
                n.D(h, s);
            }
            return n;
        }
        PriorityQueue.prototype.m = function(t) {
            var i = this.q[t];
            while (t > 0) {
                var e = t - 1 >> 1;
                var r = this.q[e];
                if (this.M(r, i) <= 0) break;
                this.q[t] = r;
                t = e;
            }
            this.q[t] = i;
        };
        PriorityQueue.prototype.D = function(t, i) {
            var e = this.q[t];
            while (t < i) {
                var r = t << 1 | 1;
                var n = r + 1;
                var s = this.q[r];
                if (n < this.t && this.M(s, this.q[n]) > 0) {
                    r = n;
                    s = this.q[n];
                }
                if (this.M(s, e) >= 0) break;
                this.q[t] = s;
                t = r;
            }
            this.q[t] = e;
        };
        PriorityQueue.prototype.clear = function() {
            this.t = 0;
            this.q.length = 0;
        };
        PriorityQueue.prototype.push = function(t) {
            this.q.push(t);
            this.m(this.t);
            this.t += 1;
        };
        PriorityQueue.prototype.pop = function() {
            if (!this.t) return;
            var t = this.q.pop();
            this.t -= 1;
            if (this.t) {
                this.q[0] = t;
                this.D(0, this.t >> 1);
            }
        };
        PriorityQueue.prototype.top = function() {
            return this.q[0];
        };
        PriorityQueue.prototype.find = function(t) {
            return this.q.indexOf(t) >= 0;
        };
        PriorityQueue.prototype.remove = function(t) {
            var i = this.q.indexOf(t);
            if (i < 0) return false;
            if (i === 0) {
                this.pop();
            } else if (i === this.t - 1) {
                this.q.pop();
                this.t -= 1;
            } else {
                this.q.splice(i, 1, this.q.pop());
                this.t -= 1;
                this.m(i);
                this.D(i, this.t >> 1);
            }
            return true;
        };
        PriorityQueue.prototype.updateItem = function(t) {
            var i = this.q.indexOf(t);
            if (i < 0) return false;
            this.m(i);
            this.D(i, this.t >> 1);
            return true;
        };
        PriorityQueue.prototype.toArray = function() {
            return __spreadArray([], __read(this.q), false);
        };
        return PriorityQueue;
    }(e);
    var c = function(t) {
        __extends(VectorIterator, t);
        function VectorIterator() {
            return t !== null && t.apply(this, arguments) || this;
        }
        VectorIterator.prototype.copy = function() {
            return new VectorIterator(this.h, this.u, this.o, this.v, this.iteratorType);
        };
        return VectorIterator;
    }(h);
    var v = function(t) {
        __extends(Vector, t);
        function Vector(i, e) {
            if (i === void 0) {
                i = [];
            }
            if (e === void 0) {
                e = true;
            }
            var r = t.call(this) || this;
            if (Array.isArray(i)) {
                r.C = e ? __spreadArray([], __read(i), false) : i;
                r.t = i.length;
            } else {
                r.C = [];
                i.forEach((function(t) {
                    return r.pushBack(t);
                }));
            }
            r.size = r.size.bind(r);
            r.getElementByPos = r.getElementByPos.bind(r);
            r.setElementByPos = r.setElementByPos.bind(r);
            return r;
        }
        Vector.prototype.clear = function() {
            this.t = 0;
            this.C.length = 0;
        };
        Vector.prototype.begin = function() {
            return new c(0, this.size, this.getElementByPos, this.setElementByPos);
        };
        Vector.prototype.end = function() {
            return new c(this.t, this.size, this.getElementByPos, this.setElementByPos);
        };
        Vector.prototype.rBegin = function() {
            return new c(this.t - 1, this.size, this.getElementByPos, this.setElementByPos, 1);
        };
        Vector.prototype.rEnd = function() {
            return new c(-1, this.size, this.getElementByPos, this.setElementByPos, 1);
        };
        Vector.prototype.front = function() {
            return this.C[0];
        };
        Vector.prototype.back = function() {
            return this.C[this.t - 1];
        };
        Vector.prototype.forEach = function(t) {
            for (var i = 0; i < this.t; ++i) {
                t(this.C[i], i);
            }
        };
        Vector.prototype.getElementByPos = function(t) {
            return this.C[t];
        };
        Vector.prototype.eraseElementByPos = function(t) {
            this.C.splice(t, 1);
            this.t -= 1;
        };
        Vector.prototype.eraseElementByValue = function(t) {
            var i = 0;
            for (var e = 0; e < this.t; ++e) {
                if (this.C[e] !== t) {
                    this.C[i++] = this.C[e];
                }
            }
            this.t = this.C.length = i;
        };
        Vector.prototype.eraseElementByIterator =